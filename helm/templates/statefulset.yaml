# ------------------------------------------------------------------------------
# Copyright 2012-2019 Aerospike, Inc.
#
# Portions may be licensed to Aerospike, Inc. under one or more contributor
# license agreements.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
# ------------------------------------------------------------------------------

## Statefulset definition.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "aerospike.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels: &AerospikeDeploymentLabels
    app: {{ template "aerospike.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "aerospike.fullname" . }}
  selector:
    matchLabels:
      app: {{ template "aerospike.name" . }}
      chart: {{ .Chart.Name }}-{{ .Chart.Version }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.dBReplicas }}
  template:
    metadata:
      labels: *AerospikeDeploymentLabels
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
      - name: aerospike
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 3000
          name: aero-clients
        - containerPort: 3002
          name: aero-mesh
        - containerPort: 3003
          name: aero-info
        # Do not stop node before migrations are complete
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              {{- $security := .Values.aerospikeSecurity }}
              {{- if $security.enabled }}
              - "while true; do finished=0; for part in $( asadm -U {{ $security.aerospikeUsername }} -P {{ $security.aerospikePassword }} --no-config-file -e 'asinfo -v statistics -l' | grep migrate_partitions_remaining | cut -d= -f2); do if [ $part != 0 ]; then finished=0; break; fi; finished=1; done; if [ $finished != 1 ]; then sleep 15; else exit 0; fi; done"
              {{- else }}
              - "while true; do finished=0; for part in $( asadm --no-config-file -e 'asinfo -v statistics -l' | grep migrate_partitions_remaining | cut -d= -f2); do if [ $part != 0 ]; then finished=0; break; fi; finished=1; done; if [ $finished != 1 ]; then sleep 15; else exit 0; fi; done"
              {{- end }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            {{- $security := .Values.aerospikeSecurity }}
            {{- if $security.enabled }}
            - "asinfo -U {{ $security.aerospikeUsername }} -P {{ $security.aerospikePassword }} -v build"
            {{- else }}
            - "asinfo -v build"
            {{- end }}
          initialDelaySeconds: 30
          periodSeconds: 60
        readinessProbe:
          tcpSocket:
              port: 3000
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: confdir
          mountPath: /etc/aerospike
        {{- range $pv := .Values.persistenceStorage }}
        {{- if $pv.enabled }}
        {{- if eq $pv.volumeMode "Filesystem"}}
        - name: {{ $pv.name | quote }}
          mountPath: {{ $pv.mountPath | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- range $lv := .Values.volumes }}
        - name: {{ $lv.name | quote }}
          mountPath: {{ $lv.mountPath | quote }}
        {{- end }}
        volumeDevices:
        {{- range $pv := .Values.persistenceStorage }}
        {{- if $pv.enabled }}
        {{- if eq $pv.volumeMode "Block"}}
        - name: {{ $pv.name | quote }}
          devicePath: {{ $pv.devicePath | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: NAMESPACE
          value: {{ .Values.aerospikeNamespace | quote }}
        - name: REPL_FACTOR
          value: {{ .Values.aerospikeReplicationFactor | quote }}
        - name: MEM_GB
          value: {{ .Values.aerospikeNamespaceMemoryGB | quote }}
        - name: DEFAULT_TTL
          value: {{ .Values.aerospikeDefaultTTL | quote }}
        - name: FEATURE_KEY_FILE
          value: {{ .Values.aerospikeFeatureKeyFile | quote }}
        # Downward API:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      initContainers:
      - name: aerospike-init
        image: "{{ .Values.toolsImage.repository }}:{{ .Values.toolsImage.tag }}"
        command: ["/bin/sh"]
        args: ["-c", "cp /configs/install.sh /install.sh && chmod +x /install.sh && /install.sh"]
        volumeMounts:
        - name: confdir
          mountPath: /etc/aerospike
        - name: initconfigs
          mountPath: /configs
        env:    # Variables needed by peer-finder for discovery
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVICE
          value: {{ template "aerospike.fullname" . }}
      volumes:
      - name: confdir
        emptyDir: {}
      - name: initconfigs
        configMap:
          name: {{ .Release.Name }}-conf
      {{- range $lv := .Values.volumes }}
      - name: {{ $lv.name | quote }}
{{ toYaml $lv.template  | indent 8}}
      {{- end }}
  volumeClaimTemplates:
    {{- range $pv := .Values.persistenceStorage }}
    {{- if $pv.enabled }}
    - metadata:
        name: {{ $pv.name }}
        labels: *AerospikeDeploymentLabels
      spec:
        volumeMode: {{ $pv.volumeMode }}
        accessModes:
          - {{ $pv.accessMode | quote }}
      {{- if hasKey $pv "storageClass" }}
        storageClassName: {{ $pv.storageClass | quote }}
      {{- end }}
        resources:
          requests:
            storage: {{ $pv.size | quote }}
    {{- end }}
    {{- end }}
---
